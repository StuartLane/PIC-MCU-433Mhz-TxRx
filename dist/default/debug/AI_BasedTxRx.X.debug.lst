

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Thu Jul  3 20:52:46 2025

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F1847
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 07/09/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F1847 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0000                     	;# 
    52     0001                     	;# 
    53     0002                     	;# 
    54     0003                     	;# 
    55     0004                     	;# 
    56     0005                     	;# 
    57     0006                     	;# 
    58     0007                     	;# 
    59     0008                     	;# 
    60     0009                     	;# 
    61     000A                     	;# 
    62     000B                     	;# 
    63     000C                     	;# 
    64     000D                     	;# 
    65     0011                     	;# 
    66     0012                     	;# 
    67     0013                     	;# 
    68     0014                     	;# 
    69     0015                     	;# 
    70     0016                     	;# 
    71     0016                     	;# 
    72     0017                     	;# 
    73     0018                     	;# 
    74     0019                     	;# 
    75     001A                     	;# 
    76     001B                     	;# 
    77     001C                     	;# 
    78     001E                     	;# 
    79     001F                     	;# 
    80     008C                     	;# 
    81     008D                     	;# 
    82     0091                     	;# 
    83     0092                     	;# 
    84     0093                     	;# 
    85     0094                     	;# 
    86     0095                     	;# 
    87     0096                     	;# 
    88     0097                     	;# 
    89     0098                     	;# 
    90     0099                     	;# 
    91     009A                     	;# 
    92     009B                     	;# 
    93     009B                     	;# 
    94     009C                     	;# 
    95     009D                     	;# 
    96     009E                     	;# 
    97     010C                     	;# 
    98     010D                     	;# 
    99     0111                     	;# 
   100     0112                     	;# 
   101     0113                     	;# 
   102     0114                     	;# 
   103     0115                     	;# 
   104     0116                     	;# 
   105     0117                     	;# 
   106     0118                     	;# 
   107     0119                     	;# 
   108     011A                     	;# 
   109     011B                     	;# 
   110     011D                     	;# 
   111     011E                     	;# 
   112     018C                     	;# 
   113     018D                     	;# 
   114     0191                     	;# 
   115     0191                     	;# 
   116     0192                     	;# 
   117     0193                     	;# 
   118     0193                     	;# 
   119     0193                     	;# 
   120     0194                     	;# 
   121     0195                     	;# 
   122     0196                     	;# 
   123     0199                     	;# 
   124     019A                     	;# 
   125     019B                     	;# 
   126     019B                     	;# 
   127     019B                     	;# 
   128     019B                     	;# 
   129     019C                     	;# 
   130     019C                     	;# 
   131     019D                     	;# 
   132     019E                     	;# 
   133     019F                     	;# 
   134     020C                     	;# 
   135     020D                     	;# 
   136     0211                     	;# 
   137     0211                     	;# 
   138     0212                     	;# 
   139     0212                     	;# 
   140     0213                     	;# 
   141     0213                     	;# 
   142     0214                     	;# 
   143     0214                     	;# 
   144     0215                     	;# 
   145     0215                     	;# 
   146     0215                     	;# 
   147     0216                     	;# 
   148     0216                     	;# 
   149     0217                     	;# 
   150     0217                     	;# 
   151     0219                     	;# 
   152     021A                     	;# 
   153     021B                     	;# 
   154     021C                     	;# 
   155     021D                     	;# 
   156     021E                     	;# 
   157     021F                     	;# 
   158     0291                     	;# 
   159     0291                     	;# 
   160     0292                     	;# 
   161     0293                     	;# 
   162     0294                     	;# 
   163     0295                     	;# 
   164     0295                     	;# 
   165     0296                     	;# 
   166     0298                     	;# 
   167     0298                     	;# 
   168     0299                     	;# 
   169     029A                     	;# 
   170     029B                     	;# 
   171     029C                     	;# 
   172     029C                     	;# 
   173     029D                     	;# 
   174     029E                     	;# 
   175     029E                     	;# 
   176     0311                     	;# 
   177     0311                     	;# 
   178     0312                     	;# 
   179     0313                     	;# 
   180     0318                     	;# 
   181     0318                     	;# 
   182     0319                     	;# 
   183     031A                     	;# 
   184     0394                     	;# 
   185     0395                     	;# 
   186     0396                     	;# 
   187     039A                     	;# 
   188     039C                     	;# 
   189     039D                     	;# 
   190     039E                     	;# 
   191     039F                     	;# 
   192     0415                     	;# 
   193     0416                     	;# 
   194     0417                     	;# 
   195     041C                     	;# 
   196     041D                     	;# 
   197     041E                     	;# 
   198     0FE4                     	;# 
   199     0FE5                     	;# 
   200     0FE6                     	;# 
   201     0FE7                     	;# 
   202     0FE8                     	;# 
   203     0FE9                     	;# 
   204     0FEA                     	;# 
   205     0FEB                     	;# 
   206     0FED                     	;# 
   207     0FEE                     	;# 
   208     0FEF                     	;# 
   209     0000                     	;# 
   210     0001                     	;# 
   211     0002                     	;# 
   212     0003                     	;# 
   213     0004                     	;# 
   214     0005                     	;# 
   215     0006                     	;# 
   216     0007                     	;# 
   217     0008                     	;# 
   218     0009                     	;# 
   219     000A                     	;# 
   220     000B                     	;# 
   221     000C                     	;# 
   222     000D                     	;# 
   223     0011                     	;# 
   224     0012                     	;# 
   225     0013                     	;# 
   226     0014                     	;# 
   227     0015                     	;# 
   228     0016                     	;# 
   229     0016                     	;# 
   230     0017                     	;# 
   231     0018                     	;# 
   232     0019                     	;# 
   233     001A                     	;# 
   234     001B                     	;# 
   235     001C                     	;# 
   236     001E                     	;# 
   237     001F                     	;# 
   238     008C                     	;# 
   239     008D                     	;# 
   240     0091                     	;# 
   241     0092                     	;# 
   242     0093                     	;# 
   243     0094                     	;# 
   244     0095                     	;# 
   245     0096                     	;# 
   246     0097                     	;# 
   247     0098                     	;# 
   248     0099                     	;# 
   249     009A                     	;# 
   250     009B                     	;# 
   251     009B                     	;# 
   252     009C                     	;# 
   253     009D                     	;# 
   254     009E                     	;# 
   255     010C                     	;# 
   256     010D                     	;# 
   257     0111                     	;# 
   258     0112                     	;# 
   259     0113                     	;# 
   260     0114                     	;# 
   261     0115                     	;# 
   262     0116                     	;# 
   263     0117                     	;# 
   264     0118                     	;# 
   265     0119                     	;# 
   266     011A                     	;# 
   267     011B                     	;# 
   268     011D                     	;# 
   269     011E                     	;# 
   270     018C                     	;# 
   271     018D                     	;# 
   272     0191                     	;# 
   273     0191                     	;# 
   274     0192                     	;# 
   275     0193                     	;# 
   276     0193                     	;# 
   277     0193                     	;# 
   278     0194                     	;# 
   279     0195                     	;# 
   280     0196                     	;# 
   281     0199                     	;# 
   282     019A                     	;# 
   283     019B                     	;# 
   284     019B                     	;# 
   285     019B                     	;# 
   286     019B                     	;# 
   287     019C                     	;# 
   288     019C                     	;# 
   289     019D                     	;# 
   290     019E                     	;# 
   291     019F                     	;# 
   292     020C                     	;# 
   293     020D                     	;# 
   294     0211                     	;# 
   295     0211                     	;# 
   296     0212                     	;# 
   297     0212                     	;# 
   298     0213                     	;# 
   299     0213                     	;# 
   300     0214                     	;# 
   301     0214                     	;# 
   302     0215                     	;# 
   303     0215                     	;# 
   304     0215                     	;# 
   305     0216                     	;# 
   306     0216                     	;# 
   307     0217                     	;# 
   308     0217                     	;# 
   309     0219                     	;# 
   310     021A                     	;# 
   311     021B                     	;# 
   312     021C                     	;# 
   313     021D                     	;# 
   314     021E                     	;# 
   315     021F                     	;# 
   316     0291                     	;# 
   317     0291                     	;# 
   318     0292                     	;# 
   319     0293                     	;# 
   320     0294                     	;# 
   321     0295                     	;# 
   322     0295                     	;# 
   323     0296                     	;# 
   324     0298                     	;# 
   325     0298                     	;# 
   326     0299                     	;# 
   327     029A                     	;# 
   328     029B                     	;# 
   329     029C                     	;# 
   330     029C                     	;# 
   331     029D                     	;# 
   332     029E                     	;# 
   333     029E                     	;# 
   334     0311                     	;# 
   335     0311                     	;# 
   336     0312                     	;# 
   337     0313                     	;# 
   338     0318                     	;# 
   339     0318                     	;# 
   340     0319                     	;# 
   341     031A                     	;# 
   342     0394                     	;# 
   343     0395                     	;# 
   344     0396                     	;# 
   345     039A                     	;# 
   346     039C                     	;# 
   347     039D                     	;# 
   348     039E                     	;# 
   349     039F                     	;# 
   350     0415                     	;# 
   351     0416                     	;# 
   352     0417                     	;# 
   353     041C                     	;# 
   354     041D                     	;# 
   355     041E                     	;# 
   356     0FE4                     	;# 
   357     0FE5                     	;# 
   358     0FE6                     	;# 
   359     0FE7                     	;# 
   360     0FE8                     	;# 
   361     0FE9                     	;# 
   362     0FEA                     	;# 
   363     0FEB                     	;# 
   364     0FED                     	;# 
   365     0FEE                     	;# 
   366     0FEF                     	;# 
   367     000B                     _INTCONbits	set	11
   368     001F                     _CPSCON1	set	31
   369     001E                     _CPSCON0	set	30
   370     0011                     _PIR1bits	set	17
   371     008D                     _TRISBbits	set	141
   372     008C                     _TRISAbits	set	140
   373     0091                     _PIE1bits	set	145
   374     010C                     _LATAbits	set	268
   375     018D                     _ANSELBbits	set	397
   376     0199                     _RCREG	set	409
   377     019A                     _TXREG	set	410
   378     019D                     _RCSTAbits	set	413
   379     019E                     _TXSTAbits	set	414
   380     019B                     _SPBRGL	set	411
   381     019C                     _SPBRGH	set	412
   382                           
   383                           	psect	cinit
   384     002E                     start_initialization:	
   385                           ; #config settings
   386                           
   387     002E                     __initialization:
   388                           
   389                           ; Clear objects allocated to COMMON
   390     002E  01F6               	clrf	__pbssCOMMON& (0+127)
   391     002F  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   392     0030  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   393     0031  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   394                           
   395                           ; Clear objects allocated to BANK0
   396     0032  3020               	movlw	low __pbssBANK0
   397     0033  0084               	movwf	4
   398     0034  3000               	movlw	high __pbssBANK0
   399     0035  0085               	movwf	5
   400     0036  3019               	movlw	25
   401     0037  3180  20BF  3180   	fcall	clear_ram0
   402     003A                     end_of_initialization:	
   403                           ;End of C runtime variable initialization code
   404                           
   405     003A                     __end_of__initialization:
   406     003A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   407     003B  0020               	movlb	0
   408     003C  3180  283E         	ljmp	_main	;jump to C main() function
   409                           
   410                           	psect	bssCOMMON
   411     0076                     __pbssCOMMON:
   412     0076                     _num:
   413     0076                     	ds	2
   414     0078                     _numChars:
   415     0078                     	ds	2
   416                           
   417                           	psect	bssBANK0
   418     0020                     __pbssBANK0:
   419     0020                     _rxdChar:
   420     0020                     	ds	25
   421                           
   422                           	psect	clrtext
   423     00BF                     clear_ram0:	
   424                           ;	Called with FSR0 containing the base address, and
   425                           ;	WREG with the size to clear
   426                           
   427     00BF  0064               	clrwdt	;clear the watchdog before getting into this loop
   428     00C0                     clrloop0:
   429     00C0  0180               	clrf	0	;clear RAM location pointed to by FSR
   430     00C1  3101               	addfsr 0,1
   431     00C2  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   432     00C3  28C0               	goto	clrloop0	;have we reached the end yet?
   433     00C4  3400               	retlw	0	;all done for this memory range, return
   434                           
   435                           	psect	cstackCOMMON
   436     0070                     __pcstackCOMMON:
   437     0070                     ?_EUSART_Init:
   438     0070                     ?_EUSART_Write:	
   439                           ; 1 bytes @ 0x0
   440                           
   441     0070                     ?_EUSART_WriteString:	
   442                           ; 1 bytes @ 0x0
   443                           
   444     0070                     ??_ISR:	
   445                           ; 1 bytes @ 0x0
   446                           
   447     0070                     ?_main:	
   448                           ; 1 bytes @ 0x0
   449                           
   450     0070                     ?_ISR:	
   451                           ; 1 bytes @ 0x0
   452                           
   453                           
   454                           ; 2 bytes @ 0x0
   455     0070                     	ds	1
   456     0071                     ??_EUSART_Init:
   457     0071                     ??_EUSART_Write:	
   458                           ; 1 bytes @ 0x1
   459                           
   460     0071                     EUSART_Write@data:	
   461                           ; 1 bytes @ 0x1
   462                           
   463                           
   464                           ; 1 bytes @ 0x1
   465     0071                     	ds	1
   466     0072                     ??_EUSART_WriteString:
   467                           
   468                           ; 1 bytes @ 0x2
   469     0072                     	ds	1
   470     0073                     EUSART_WriteString@str:
   471                           
   472                           ; 1 bytes @ 0x3
   473     0073                     	ds	1
   474     0074                     ??_main:
   475                           
   476                           ; 1 bytes @ 0x4
   477     0074                     	ds	2
   478                           
   479                           	psect	maintext
   480     003E                     __pmaintext:	
   481 ;;
   482 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   483 ;;
   484 ;; *************** function _main *****************
   485 ;; Defined at:
   486 ;;		line 123 in file "main.c"
   487 ;; Parameters:    Size  Location     Type
   488 ;;		None
   489 ;; Auto vars:     Size  Location     Type
   490 ;;  tx_buffer      20    0        unsigned char [20]
   491 ;;  buffer         20    0        unsigned char [20]
   492 ;; Return value:  Size  Location     Type
   493 ;;                  1    wreg      void 
   494 ;; Registers used:
   495 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   496 ;; Tracked objects:
   497 ;;		On entry : B1F/0
   498 ;;		On exit  : 0/0
   499 ;;		Unchanged: 0/0
   500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   503 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   504 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   505 ;;Total ram usage:        2 bytes
   506 ;; Hardware stack levels required when called: 3
   507 ;; This function calls:
   508 ;;		_EUSART_Init
   509 ;;		_EUSART_WriteString
   510 ;; This function is called by:
   511 ;;		Startup code after reset
   512 ;; This function uses a non-reentrant model
   513 ;;
   514                           
   515     003E                     _main:	
   516                           ;psect for function _main
   517                           
   518     003E                     l717:	
   519                           ;incstack = 0
   520                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   521                           
   522                           
   523                           ;main.c: 125:     TRISAbits.TRISA1 = 0;
   524     003E  0021               	movlb	1	; select bank1
   525     003F  108C               	bcf	12,1	;volatile
   526                           
   527                           ;main.c: 126:     TRISBbits.TRISB1 = 1;
   528     0040  148D               	bsf	13,1	;volatile
   529                           
   530                           ;main.c: 127:     LATAbits.LATA1 = 0;
   531     0041  0022               	movlb	2	; select bank2
   532     0042  108C               	bcf	12,1	;volatile
   533                           
   534                           ;main.c: 128:     char buffer[20];;main.c: 129:     char tx_buffer[20];;main.c: 130:    
      +                           ANSELBbits.ANSB2 = 0;
   535     0043  0023               	movlb	3	; select bank3
   536     0044  110D               	bcf	13,2	;volatile
   537                           
   538                           ;main.c: 131:     ANSELBbits.ANSB1 = 0;
   539     0045  108D               	bcf	13,1	;volatile
   540     0046                     l719:
   541                           
   542                           ;main.c: 132:     CPSCON0 = 0x00;
   543     0046  0020               	movlb	0	; select bank0
   544     0047  019E               	clrf	30	;volatile
   545                           
   546                           ;main.c: 133:     CPSCON1 = 0x00;
   547     0048  019F               	clrf	31	;volatile
   548     0049                     l721:
   549                           
   550                           ;main.c: 135:     INTCONbits.GIE = 1;
   551     0049  178B               	bsf	11,7	;volatile
   552     004A                     l723:
   553                           
   554                           ;main.c: 136:     INTCONbits.PEIE = 1;
   555     004A  170B               	bsf	11,6	;volatile
   556     004B                     l725:
   557                           
   558                           ;main.c: 137:     PIE1bits.RCIE = 1;
   559     004B  0021               	movlb	1	; select bank1
   560     004C  1691               	bsf	17,5	;volatile
   561     004D                     l727:
   562                           
   563                           ;main.c: 138:     RCSTAbits.CREN = 1;
   564     004D  0023               	movlb	3	; select bank3
   565     004E  161D               	bsf	29,4	;volatile
   566     004F                     l729:
   567                           
   568                           ;main.c: 143:     rxdChar[0] = 0x41;
   569     004F  3041               	movlw	65
   570     0050  0020               	movlb	0	; select bank0
   571     0051  00A0               	movwf	_rxdChar	;volatile
   572     0052                     l731:
   573                           
   574                           ;main.c: 144:     rxdChar[1] = 0x42;
   575     0052  3042               	movlw	66
   576     0053  00A1               	movwf	_rxdChar+1	;volatile
   577     0054                     l733:
   578                           
   579                           ;main.c: 145:     rxdChar[2] = 0x43;
   580     0054  3043               	movlw	67
   581     0055  00A2               	movwf	_rxdChar+2	;volatile
   582     0056                     l735:
   583                           
   584                           ;main.c: 146:     rxdChar[3] = 0x44;
   585     0056  3044               	movlw	68
   586     0057  00A3               	movwf	_rxdChar+3	;volatile
   587     0058                     l737:
   588                           
   589                           ;main.c: 147:     rxdChar[4] = 0x45;
   590     0058  3045               	movlw	69
   591     0059  00A4               	movwf	_rxdChar+4	;volatile
   592     005A                     l739:
   593                           
   594                           ;main.c: 148:     rxdChar[5] = 0x46;
   595     005A  3046               	movlw	70
   596     005B  00A5               	movwf	_rxdChar+5	;volatile
   597     005C                     l741:
   598                           
   599                           ;main.c: 149:     rxdChar[6] = 0x47;
   600     005C  3047               	movlw	71
   601     005D  00A6               	movwf	_rxdChar+6	;volatile
   602     005E                     l743:
   603                           
   604                           ;main.c: 150:     rxdChar[7] = 0x48;
   605     005E  3048               	movlw	72
   606     005F  00A7               	movwf	_rxdChar+7	;volatile
   607     0060                     l745:
   608                           
   609                           ;main.c: 151:     rxdChar[8] = 0x49;
   610     0060  3049               	movlw	73
   611     0061  00A8               	movwf	_rxdChar+8	;volatile
   612     0062                     l747:
   613                           
   614                           ;main.c: 152:     rxdChar[9] = 0x4A;
   615     0062  304A               	movlw	74
   616     0063  00A9               	movwf	_rxdChar+9	;volatile
   617     0064                     l749:
   618                           
   619                           ;main.c: 153:     rxdChar[10] = 0x4B;
   620     0064  304B               	movlw	75
   621     0065  00AA               	movwf	_rxdChar+10	;volatile
   622     0066                     l751:
   623                           
   624                           ;main.c: 154:     rxdChar[11] = 0x4C;
   625     0066  304C               	movlw	76
   626     0067  00AB               	movwf	_rxdChar+11	;volatile
   627     0068                     l753:
   628                           
   629                           ;main.c: 155:     rxdChar[12] = 0x4D;
   630     0068  304D               	movlw	77
   631     0069  00AC               	movwf	_rxdChar+12	;volatile
   632     006A                     l755:
   633                           
   634                           ;main.c: 156:     rxdChar[13] = 0x4E;
   635     006A  304E               	movlw	78
   636     006B  00AD               	movwf	_rxdChar+13	;volatile
   637     006C                     l757:
   638                           
   639                           ;main.c: 157:     rxdChar[14] = 0x4F;
   640     006C  304F               	movlw	79
   641     006D  00AE               	movwf	_rxdChar+14	;volatile
   642     006E                     l759:
   643                           
   644                           ;main.c: 158:     rxdChar[15] = 0x50;
   645     006E  3050               	movlw	80
   646     006F  00AF               	movwf	_rxdChar+15	;volatile
   647     0070                     l761:
   648                           
   649                           ;main.c: 159:     rxdChar[16] = 0x51;
   650     0070  3051               	movlw	81
   651     0071  00B0               	movwf	_rxdChar+16	;volatile
   652     0072                     l763:
   653                           
   654                           ;main.c: 160:     rxdChar[17] = 0x52;
   655     0072  3052               	movlw	82
   656     0073  00B1               	movwf	_rxdChar+17	;volatile
   657     0074                     l765:
   658                           
   659                           ;main.c: 161:     rxdChar[18] = 0x0D;
   660     0074  300D               	movlw	13
   661     0075  00B2               	movwf	_rxdChar+18	;volatile
   662     0076                     l767:
   663                           
   664                           ;main.c: 162:     rxdChar[19] = 0x0A;
   665     0076  300A               	movlw	10
   666     0077  00B3               	movwf	_rxdChar+19	;volatile
   667     0078                     l769:
   668                           
   669                           ;main.c: 165:     EUSART_Init();
   670     0078  3180  20B5  3180   	fcall	_EUSART_Init
   671     007B                     l771:
   672                           
   673                           ;main.c: 174:         TXSTAbits.TXEN = 1;
   674     007B  0023               	movlb	3	; select bank3
   675     007C  169E               	bsf	30,5	;volatile
   676     007D                     l773:
   677                           
   678                           ;main.c: 175:         EUSART_WriteString(rxdChar);
   679     007D  3020               	movlw	(low (_rxdChar| 0))& (0+255)
   680     007E  3180  2095  3180   	fcall	_EUSART_WriteString
   681     0081                     l775:
   682                           
   683                           ;main.c: 176:         TXSTAbits.TXEN = 0;
   684     0081  0023               	movlb	3	; select bank3
   685     0082  129E               	bcf	30,5	;volatile
   686     0083                     l777:
   687                           
   688                           ;main.c: 177:         LATAbits.LATA1 = 0;
   689     0083  0022               	movlb	2	; select bank2
   690     0084  108C               	bcf	12,1	;volatile
   691     0085                     l779:
   692                           
   693                           ;main.c: 178:         _delay((unsigned long)((500)*(4000000/4000.0)));
   694     0085  3003               	movlw	3
   695     0086  00F5               	movwf	??_main+1
   696     0087  308A               	movlw	138
   697     0088  00F4               	movwf	??_main
   698     0089  3056               	movlw	86
   699     008A                     u47:
   700     008A  0B89               	decfsz	9,f
   701     008B  288A               	goto	u47
   702     008C  0BF4               	decfsz	??_main,f
   703     008D  288A               	goto	u47
   704     008E  0BF5               	decfsz	??_main+1,f
   705     008F  288A               	goto	u47
   706     0090                     l781:
   707                           
   708                           ;main.c: 179:         LATAbits.LATA1 = 1;
   709     0090  0022               	movlb	2	; select bank2
   710     0091  148C               	bsf	12,1	;volatile
   711     0092  287B               	goto	l771
   712     0093  3180  282C         	ljmp	start
   713     0095                     __end_of_main:
   714                           
   715                           	psect	text1
   716     0095                     __ptext1:	
   717 ;; *************** function _EUSART_WriteString *****************
   718 ;; Defined at:
   719 ;;		line 80 in file "main.c"
   720 ;; Parameters:    Size  Location     Type
   721 ;;  str             1    wreg     PTR const unsigned char 
   722 ;;		 -> rxdChar(25), 
   723 ;; Auto vars:     Size  Location     Type
   724 ;;  str             1    3[COMMON] PTR const unsigned char 
   725 ;;		 -> rxdChar(25), 
   726 ;; Return value:  Size  Location     Type
   727 ;;                  1    wreg      void 
   728 ;; Registers used:
   729 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   730 ;; Tracked objects:
   731 ;;		On entry : 0/0
   732 ;;		On exit  : 0/0
   733 ;;		Unchanged: 0/0
   734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   736 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   737 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   738 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   739 ;;Total ram usage:        2 bytes
   740 ;; Hardware stack levels used: 1
   741 ;; Hardware stack levels required when called: 2
   742 ;; This function calls:
   743 ;;		_EUSART_Write
   744 ;; This function is called by:
   745 ;;		_main
   746 ;; This function uses a non-reentrant model
   747 ;;
   748                           
   749     0095                     _EUSART_WriteString:	
   750                           ;psect for function _EUSART_WriteString
   751                           
   752                           
   753                           ;incstack = 0
   754                           ; Regs used in _EUSART_WriteString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   755                           ;EUSART_WriteString@str stored from wreg
   756     0095  00F3               	movwf	EUSART_WriteString@str
   757     0096                     l693:
   758                           
   759                           ;main.c: 81:     while (*str) {
   760     0096  28A2               	goto	l699
   761     0097                     l695:
   762                           
   763                           ;main.c: 83:         EUSART_Write(*str++);
   764     0097  0873               	movf	EUSART_WriteString@str,w
   765     0098  0086               	movwf	6
   766     0099  0187               	clrf	7
   767     009A  0801               	movf	1,w
   768     009B  3180  20AB  3180   	fcall	_EUSART_Write
   769     009E                     l697:
   770     009E  3001               	movlw	1
   771     009F  00F2               	movwf	??_EUSART_WriteString
   772     00A0  0872               	movf	??_EUSART_WriteString,w
   773     00A1  07F3               	addwf	EUSART_WriteString@str,f
   774     00A2                     l699:
   775                           
   776                           ;main.c: 81:     while (*str) {
   777     00A2  0873               	movf	EUSART_WriteString@str,w
   778     00A3  0086               	movwf	6
   779     00A4  0187               	clrf	7
   780     00A5  0801               	movf	1,w
   781     00A6  1D03               	btfss	3,2
   782     00A7  28A9               	goto	u21
   783     00A8  28AA               	goto	u20
   784     00A9                     u21:
   785     00A9  2897               	goto	l695
   786     00AA                     u20:
   787     00AA                     l53:
   788     00AA  0008               	return
   789     00AB                     __end_of_EUSART_WriteString:
   790                           
   791                           	psect	text2
   792     00AB                     __ptext2:	
   793 ;; *************** function _EUSART_Write *****************
   794 ;; Defined at:
   795 ;;		line 75 in file "main.c"
   796 ;; Parameters:    Size  Location     Type
   797 ;;  data            1    wreg     unsigned char 
   798 ;; Auto vars:     Size  Location     Type
   799 ;;  data            1    1[COMMON] unsigned char 
   800 ;; Return value:  Size  Location     Type
   801 ;;                  1    wreg      void 
   802 ;; Registers used:
   803 ;;		wreg
   804 ;; Tracked objects:
   805 ;;		On entry : 0/0
   806 ;;		On exit  : 0/0
   807 ;;		Unchanged: 0/0
   808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   810 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   812 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   813 ;;Total ram usage:        1 bytes
   814 ;; Hardware stack levels used: 1
   815 ;; Hardware stack levels required when called: 1
   816 ;; This function calls:
   817 ;;		Nothing
   818 ;; This function is called by:
   819 ;;		_EUSART_WriteString
   820 ;; This function uses a non-reentrant model
   821 ;;
   822                           
   823     00AB                     _EUSART_Write:	
   824                           ;psect for function _EUSART_Write
   825                           
   826                           
   827                           ;incstack = 0
   828                           ; Regs used in _EUSART_Write: [wreg]
   829                           ;EUSART_Write@data stored from wreg
   830     00AB  00F1               	movwf	EUSART_Write@data
   831     00AC                     l675:
   832     00AC                     l44:	
   833                           ;main.c: 76:     while (!PIR1bits.TXIF);
   834                           
   835     00AC  0020               	movlb	0	; select bank0
   836     00AD  1E11               	btfss	17,4	;volatile
   837     00AE  28B0               	goto	u11
   838     00AF  28B1               	goto	u10
   839     00B0                     u11:
   840     00B0  28AC               	goto	l44
   841     00B1                     u10:
   842     00B1                     l677:
   843                           
   844                           ;main.c: 77:     TXREG = data;
   845     00B1  0871               	movf	EUSART_Write@data,w
   846     00B2  0023               	movlb	3	; select bank3
   847     00B3  009A               	movwf	26	;volatile
   848     00B4                     l47:
   849     00B4  0008               	return
   850     00B5                     __end_of_EUSART_Write:
   851                           
   852                           	psect	text3
   853     00B5                     __ptext3:	
   854 ;; *************** function _EUSART_Init *****************
   855 ;; Defined at:
   856 ;;		line 54 in file "main.c"
   857 ;; Parameters:    Size  Location     Type
   858 ;;		None
   859 ;; Auto vars:     Size  Location     Type
   860 ;;		None
   861 ;; Return value:  Size  Location     Type
   862 ;;                  1    wreg      void 
   863 ;; Registers used:
   864 ;;		wreg, status,2
   865 ;; Tracked objects:
   866 ;;		On entry : 0/0
   867 ;;		On exit  : 0/0
   868 ;;		Unchanged: 0/0
   869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   874 ;;Total ram usage:        0 bytes
   875 ;; Hardware stack levels used: 1
   876 ;; Hardware stack levels required when called: 1
   877 ;; This function calls:
   878 ;;		Nothing
   879 ;; This function is called by:
   880 ;;		_main
   881 ;; This function uses a non-reentrant model
   882 ;;
   883                           
   884     00B5                     _EUSART_Init:	
   885                           ;psect for function _EUSART_Init
   886                           
   887     00B5                     l679:	
   888                           ;incstack = 0
   889                           ; Regs used in _EUSART_Init: [wreg+status,2]
   890                           
   891                           
   892                           ;main.c: 57:     SPBRGH = 0;
   893     00B5  0023               	movlb	3	; select bank3
   894     00B6  019C               	clrf	28	;volatile
   895     00B7                     l681:
   896                           
   897                           ;main.c: 58:     SPBRGL = 6;
   898     00B7  3006               	movlw	6
   899     00B8  009B               	movwf	27	;volatile
   900     00B9                     l683:
   901                           
   902                           ;main.c: 60:     TXSTAbits.SYNC = 0;
   903     00B9  121E               	bcf	30,4	;volatile
   904     00BA                     l685:
   905                           
   906                           ;main.c: 61:     TXSTAbits.BRGH = 0;
   907     00BA  111E               	bcf	30,2	;volatile
   908     00BB                     l687:
   909                           
   910                           ;main.c: 62:     RCSTAbits.SPEN = 1;
   911     00BB  179D               	bsf	29,7	;volatile
   912     00BC                     l689:
   913                           
   914                           ;main.c: 65:     TXSTAbits.TXEN = 1;
   915     00BC  169E               	bsf	30,5	;volatile
   916     00BD                     l691:
   917                           
   918                           ;main.c: 66:     RCSTAbits.CREN = 1;
   919     00BD  161D               	bsf	29,4	;volatile
   920     00BE                     l41:
   921     00BE  0008               	return
   922     00BF                     __end_of_EUSART_Init:
   923                           
   924                           	psect	intentry
   925     0004                     __pintentry:	
   926 ;; *************** function _ISR *****************
   927 ;; Defined at:
   928 ;;		line 101 in file "main.c"
   929 ;; Parameters:    Size  Location     Type
   930 ;;		None
   931 ;; Auto vars:     Size  Location     Type
   932 ;;		None
   933 ;; Return value:  Size  Location     Type
   934 ;;                  2   57[None  ] int 
   935 ;; Registers used:
   936 ;;		wreg, fsr1l, fsr1h, status,2, status,0
   937 ;; Tracked objects:
   938 ;;		On entry : 0/0
   939 ;;		On exit  : 0/0
   940 ;;		Unchanged: 0/0
   941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   944 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   945 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   946 ;;Total ram usage:        1 bytes
   947 ;; Hardware stack levels used: 1
   948 ;; This function calls:
   949 ;;		Nothing
   950 ;; This function is called by:
   951 ;;		Interrupt level 1
   952 ;; This function uses a non-reentrant model
   953 ;;
   954                           
   955     0004                     _ISR:
   956                           
   957                           ;incstack = 0
   958     0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
   959                           
   960                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
   961     0005  3180               	pagesel	$
   962     0006                     i1l701:
   963                           
   964                           ;main.c: 107:     RCSTAbits.CREN = 0;
   965     0006  0023               	movlb	3	; select bank3
   966     0007  121D               	bcf	29,4	;volatile
   967                           
   968                           ;main.c: 108:     PIE1bits.RCIE = 0;
   969     0008  0021               	movlb	1	; select bank1
   970     0009  1291               	bcf	17,5	;volatile
   971     000A                     i1l703:
   972                           
   973                           ;main.c: 110:     rxdChar[num] = RCREG;
   974     000A  0876               	movf	_num,w	;volatile
   975     000B  3E20               	addlw	(low (_rxdChar| 0))& (0+255)
   976     000C  0086               	movwf	6
   977     000D  0187               	clrf	7
   978     000E  0023               	movlb	3	; select bank3
   979     000F  0819               	movf	25,w	;volatile
   980     0010  0081               	movwf	1
   981     0011                     i1l705:
   982                           
   983                           ;main.c: 111:     num++;
   984     0011  3001               	movlw	1
   985     0012  07F6               	addwf	_num,f	;volatile
   986     0013  3000               	movlw	0
   987     0014  3DF7               	addwfc	_num+1,f	;volatile
   988     0015                     i1l707:
   989                           
   990                           ;main.c: 112:     if (num >= 20) {
   991     0015  0877               	movf	_num+1,w	;volatile
   992     0016  3A80               	xorlw	128
   993     0017  00F0               	movwf	??_ISR
   994     0018  3080               	movlw	128
   995     0019  0270               	subwf	??_ISR,w
   996     001A  1D03               	skipz
   997     001B  281E               	goto	u3_25
   998     001C  3014               	movlw	20
   999     001D  0276               	subwf	_num,w	;volatile
  1000     001E                     u3_25:
  1001     001E  1C03               	skipc
  1002     001F  2821               	goto	u3_21
  1003     0020  2822               	goto	u3_20
  1004     0021                     u3_21:
  1005     0021  2824               	goto	i1l711
  1006     0022                     u3_20:
  1007     0022                     i1l709:
  1008                           
  1009                           ;main.c: 113:         num = 0;
  1010     0022  01F6               	clrf	_num	;volatile
  1011     0023  01F7               	clrf	_num+1	;volatile
  1012     0024                     i1l711:
  1013                           
  1014                           ;main.c: 116:     PIE1bits.RCIE = 1;
  1015     0024  0021               	movlb	1	; select bank1
  1016     0025  1691               	bsf	17,5	;volatile
  1017     0026                     i1l713:
  1018                           
  1019                           ;main.c: 117:     RCSTAbits.CREN = 1;
  1020     0026  0023               	movlb	3	; select bank3
  1021     0027  161D               	bsf	29,4	;volatile
  1022     0028                     i1l715:
  1023                           
  1024                           ;main.c: 118:     LATAbits.LATA1 = 1;
  1025     0028  0022               	movlb	2	; select bank2
  1026     0029  148C               	bsf	12,1	;volatile
  1027     002A                     i1l59:
  1028     002A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1029     002B  0009               	retfie
  1030     002C                     __end_of_ISR:
  1031     007E                     btemp	set	126	;btemp
  1032     007E                     int$flags	set	126
  1033     007E                     wtemp0	set	126
  1034                           
  1035                           	psect	config
  1036                           
  1037                           ;Config register CONFIG1 @ 0x8007
  1038                           ;	Oscillator Selection
  1039                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  1040                           ;	Watchdog Timer Enable
  1041                           ;	WDTE = OFF, WDT disabled
  1042                           ;	Power-up Timer Enable
  1043                           ;	PWRTE = OFF, PWRT disabled
  1044                           ;	MCLR Pin Function Select
  1045                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  1046                           ;	Flash Program Memory Code Protection
  1047                           ;	CP = OFF, Program memory code protection is disabled
  1048                           ;	Data Memory Code Protection
  1049                           ;	CPD = 0x1, unprogrammed default
  1050                           ;	Brown-out Reset Enable
  1051                           ;	BOREN = ON, Brown-out Reset enabled
  1052                           ;	Clock Out Enable
  1053                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  1054                           ;	Internal/External Switchover
  1055                           ;	IESO = ON, Internal/External Switchover mode is enabled
  1056                           ;	Fail-Safe Clock Monitor Enable
  1057                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  1058     8007                     	org	32775
  1059     8007  3FE4               	dw	16356

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         29
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80      0      25
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    EUSART_WriteString@str	PTR const unsigned char  size(1) Largest target is 25
		 -> rxdChar(BANK0[25]), 


Critical Paths under _main in COMMON

    _main->_EUSART_WriteString
    _EUSART_WriteString->_EUSART_Write

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                42    42      0      75
                                              4 COMMON     2     2      0
                        _EUSART_Init
                 _EUSART_WriteString
 ---------------------------------------------------------------------------------
 (1) _EUSART_WriteString                                   2     2      0      75
                                              2 COMMON     2     2      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         1     1      0      15
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Init
   _EUSART_WriteString
     _EUSART_Write

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0      19       5       31.2%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      23      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      23      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Thu Jul  3 20:52:46 2025

                        l41 00BE                          l44 00AC                          l53 00AA  
                        l47 00B4                          u10 00B1                          u11 00B0  
                        u20 00AA                          u21 00A9                          u47 008A  
     EUSART_WriteString@str 0073                         l721 0049                         l731 0052  
                       l723 004A                         l741 005C                         l733 0054  
                       l725 004B                         l717 003E                         l751 0066  
                       l743 005E                         l735 0056                         l727 004D  
                       l719 0046                         l681 00B7                         l761 0070  
                       l753 0068                         l745 0060                         l737 0058  
                       l729 004F                         l691 00BD                         l683 00B9  
                       l675 00AC                         l771 007B                         l763 0072  
                       l755 006A                         l747 0062                         l739 005A  
                       l685 00BA                         l677 00B1                         l693 0096  
                       l781 0090                         l773 007D                         l765 0074  
                       l757 006C                         l749 0064                         l687 00BB  
                       l679 00B5                         l695 0097                         l775 0081  
                       l767 0076                         l759 006E                         l689 00BC  
                       l697 009E                         l777 0083                         l769 0078  
                       l699 00A2                         l779 0085                         _ISR 0004  
                       _num 0076                         wreg 0009                ?_EUSART_Init 0070  
                      ?_ISR 0070                        i1l59 002A                        u3_20 0022  
                      u3_21 0021                        u3_25 001E                        _main 003E  
                      fsr0h 0005                        fsr1h 0007                        indf0 0000  
                      fsr0l 0004                        indf1 0001                        fsr1l 0006  
                      btemp 007E                        start 002C                       ??_ISR 0070  
             ?_EUSART_Write 0070                       ?_main 0070                       i1l701 0006  
                     i1l711 0024                       i1l703 000A                       i1l713 0026  
                     i1l705 0011                       i1l715 0028                       i1l707 0015  
                     i1l709 0022                       _RCREG 0199                       _TXREG 019A  
                     status 0003                       wtemp0 007E             __initialization 002E  
              __end_of_main 0095              ??_EUSART_Write 0071                      ??_main 0074  
        _EUSART_WriteString 0095                      _SPBRGH 019C                      _SPBRGL 019B  
       ?_EUSART_WriteString 0070        ??_EUSART_WriteString 0072     __end_of__initialization 003A  
            __pcstackCOMMON 0070                  __pbssBANK0 0020        __end_of_EUSART_Write 00B5  
                __pmaintext 003E                  __pintentry 0004                     _CPSCON0 001E  
                   _CPSCON1 001F                     __ptext1 0095                     __ptext2 00AB  
                   __ptext3 00B5                     _rxdChar 0020                     clrloop0 00C0  
      end_of_initialization 003A                   _RCSTAbits 019D                   _TRISAbits 008C  
                 _TRISBbits 008D                   _TXSTAbits 019E                _EUSART_Write 00AB  
       start_initialization 002E                 __end_of_ISR 002C               ??_EUSART_Init 0071  
               __pbssCOMMON 0076                   ___latbits 0002         __end_of_EUSART_Init 00BF  
                  _LATAbits 010C                   clear_ram0 00BF                    _PIE1bits 0091  
                  _PIR1bits 0011            EUSART_Write@data 0071                 _EUSART_Init 00B5  
                _ANSELBbits 018D                    _numChars 0078                    int$flags 007E  
__end_of_EUSART_WriteString 00AB                  _INTCONbits 000B                    intlevel1 0000  
