

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Tue Jul 22 11:27:57 2025

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F1847
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Generated 07/09/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F1847 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0000                     	;# 
    53     0001                     	;# 
    54     0002                     	;# 
    55     0003                     	;# 
    56     0004                     	;# 
    57     0005                     	;# 
    58     0006                     	;# 
    59     0007                     	;# 
    60     0008                     	;# 
    61     0009                     	;# 
    62     000A                     	;# 
    63     000B                     	;# 
    64     000C                     	;# 
    65     000D                     	;# 
    66     0011                     	;# 
    67     0012                     	;# 
    68     0013                     	;# 
    69     0014                     	;# 
    70     0015                     	;# 
    71     0016                     	;# 
    72     0016                     	;# 
    73     0017                     	;# 
    74     0018                     	;# 
    75     0019                     	;# 
    76     001A                     	;# 
    77     001B                     	;# 
    78     001C                     	;# 
    79     001E                     	;# 
    80     001F                     	;# 
    81     008C                     	;# 
    82     008D                     	;# 
    83     0091                     	;# 
    84     0092                     	;# 
    85     0093                     	;# 
    86     0094                     	;# 
    87     0095                     	;# 
    88     0096                     	;# 
    89     0097                     	;# 
    90     0098                     	;# 
    91     0099                     	;# 
    92     009A                     	;# 
    93     009B                     	;# 
    94     009B                     	;# 
    95     009C                     	;# 
    96     009D                     	;# 
    97     009E                     	;# 
    98     010C                     	;# 
    99     010D                     	;# 
   100     0111                     	;# 
   101     0112                     	;# 
   102     0113                     	;# 
   103     0114                     	;# 
   104     0115                     	;# 
   105     0116                     	;# 
   106     0117                     	;# 
   107     0118                     	;# 
   108     0119                     	;# 
   109     011A                     	;# 
   110     011B                     	;# 
   111     011D                     	;# 
   112     011E                     	;# 
   113     018C                     	;# 
   114     018D                     	;# 
   115     0191                     	;# 
   116     0191                     	;# 
   117     0192                     	;# 
   118     0193                     	;# 
   119     0193                     	;# 
   120     0193                     	;# 
   121     0194                     	;# 
   122     0195                     	;# 
   123     0196                     	;# 
   124     0199                     	;# 
   125     019A                     	;# 
   126     019B                     	;# 
   127     019B                     	;# 
   128     019B                     	;# 
   129     019B                     	;# 
   130     019C                     	;# 
   131     019C                     	;# 
   132     019D                     	;# 
   133     019E                     	;# 
   134     019F                     	;# 
   135     020C                     	;# 
   136     020D                     	;# 
   137     0211                     	;# 
   138     0211                     	;# 
   139     0212                     	;# 
   140     0212                     	;# 
   141     0213                     	;# 
   142     0213                     	;# 
   143     0214                     	;# 
   144     0214                     	;# 
   145     0215                     	;# 
   146     0215                     	;# 
   147     0215                     	;# 
   148     0216                     	;# 
   149     0216                     	;# 
   150     0217                     	;# 
   151     0217                     	;# 
   152     0219                     	;# 
   153     021A                     	;# 
   154     021B                     	;# 
   155     021C                     	;# 
   156     021D                     	;# 
   157     021E                     	;# 
   158     021F                     	;# 
   159     0291                     	;# 
   160     0291                     	;# 
   161     0292                     	;# 
   162     0293                     	;# 
   163     0294                     	;# 
   164     0295                     	;# 
   165     0295                     	;# 
   166     0296                     	;# 
   167     0298                     	;# 
   168     0298                     	;# 
   169     0299                     	;# 
   170     029A                     	;# 
   171     029B                     	;# 
   172     029C                     	;# 
   173     029C                     	;# 
   174     029D                     	;# 
   175     029E                     	;# 
   176     029E                     	;# 
   177     0311                     	;# 
   178     0311                     	;# 
   179     0312                     	;# 
   180     0313                     	;# 
   181     0318                     	;# 
   182     0318                     	;# 
   183     0319                     	;# 
   184     031A                     	;# 
   185     0394                     	;# 
   186     0395                     	;# 
   187     0396                     	;# 
   188     039A                     	;# 
   189     039C                     	;# 
   190     039D                     	;# 
   191     039E                     	;# 
   192     039F                     	;# 
   193     0415                     	;# 
   194     0416                     	;# 
   195     0417                     	;# 
   196     041C                     	;# 
   197     041D                     	;# 
   198     041E                     	;# 
   199     0FE4                     	;# 
   200     0FE5                     	;# 
   201     0FE6                     	;# 
   202     0FE7                     	;# 
   203     0FE8                     	;# 
   204     0FE9                     	;# 
   205     0FEA                     	;# 
   206     0FEB                     	;# 
   207     0FED                     	;# 
   208     0FEE                     	;# 
   209     0FEF                     	;# 
   210     0000                     	;# 
   211     0001                     	;# 
   212     0002                     	;# 
   213     0003                     	;# 
   214     0004                     	;# 
   215     0005                     	;# 
   216     0006                     	;# 
   217     0007                     	;# 
   218     0008                     	;# 
   219     0009                     	;# 
   220     000A                     	;# 
   221     000B                     	;# 
   222     000C                     	;# 
   223     000D                     	;# 
   224     0011                     	;# 
   225     0012                     	;# 
   226     0013                     	;# 
   227     0014                     	;# 
   228     0015                     	;# 
   229     0016                     	;# 
   230     0016                     	;# 
   231     0017                     	;# 
   232     0018                     	;# 
   233     0019                     	;# 
   234     001A                     	;# 
   235     001B                     	;# 
   236     001C                     	;# 
   237     001E                     	;# 
   238     001F                     	;# 
   239     008C                     	;# 
   240     008D                     	;# 
   241     0091                     	;# 
   242     0092                     	;# 
   243     0093                     	;# 
   244     0094                     	;# 
   245     0095                     	;# 
   246     0096                     	;# 
   247     0097                     	;# 
   248     0098                     	;# 
   249     0099                     	;# 
   250     009A                     	;# 
   251     009B                     	;# 
   252     009B                     	;# 
   253     009C                     	;# 
   254     009D                     	;# 
   255     009E                     	;# 
   256     010C                     	;# 
   257     010D                     	;# 
   258     0111                     	;# 
   259     0112                     	;# 
   260     0113                     	;# 
   261     0114                     	;# 
   262     0115                     	;# 
   263     0116                     	;# 
   264     0117                     	;# 
   265     0118                     	;# 
   266     0119                     	;# 
   267     011A                     	;# 
   268     011B                     	;# 
   269     011D                     	;# 
   270     011E                     	;# 
   271     018C                     	;# 
   272     018D                     	;# 
   273     0191                     	;# 
   274     0191                     	;# 
   275     0192                     	;# 
   276     0193                     	;# 
   277     0193                     	;# 
   278     0193                     	;# 
   279     0194                     	;# 
   280     0195                     	;# 
   281     0196                     	;# 
   282     0199                     	;# 
   283     019A                     	;# 
   284     019B                     	;# 
   285     019B                     	;# 
   286     019B                     	;# 
   287     019B                     	;# 
   288     019C                     	;# 
   289     019C                     	;# 
   290     019D                     	;# 
   291     019E                     	;# 
   292     019F                     	;# 
   293     020C                     	;# 
   294     020D                     	;# 
   295     0211                     	;# 
   296     0211                     	;# 
   297     0212                     	;# 
   298     0212                     	;# 
   299     0213                     	;# 
   300     0213                     	;# 
   301     0214                     	;# 
   302     0214                     	;# 
   303     0215                     	;# 
   304     0215                     	;# 
   305     0215                     	;# 
   306     0216                     	;# 
   307     0216                     	;# 
   308     0217                     	;# 
   309     0217                     	;# 
   310     0219                     	;# 
   311     021A                     	;# 
   312     021B                     	;# 
   313     021C                     	;# 
   314     021D                     	;# 
   315     021E                     	;# 
   316     021F                     	;# 
   317     0291                     	;# 
   318     0291                     	;# 
   319     0292                     	;# 
   320     0293                     	;# 
   321     0294                     	;# 
   322     0295                     	;# 
   323     0295                     	;# 
   324     0296                     	;# 
   325     0298                     	;# 
   326     0298                     	;# 
   327     0299                     	;# 
   328     029A                     	;# 
   329     029B                     	;# 
   330     029C                     	;# 
   331     029C                     	;# 
   332     029D                     	;# 
   333     029E                     	;# 
   334     029E                     	;# 
   335     0311                     	;# 
   336     0311                     	;# 
   337     0312                     	;# 
   338     0313                     	;# 
   339     0318                     	;# 
   340     0318                     	;# 
   341     0319                     	;# 
   342     031A                     	;# 
   343     0394                     	;# 
   344     0395                     	;# 
   345     0396                     	;# 
   346     039A                     	;# 
   347     039C                     	;# 
   348     039D                     	;# 
   349     039E                     	;# 
   350     039F                     	;# 
   351     0415                     	;# 
   352     0416                     	;# 
   353     0417                     	;# 
   354     041C                     	;# 
   355     041D                     	;# 
   356     041E                     	;# 
   357     0FE4                     	;# 
   358     0FE5                     	;# 
   359     0FE6                     	;# 
   360     0FE7                     	;# 
   361     0FE8                     	;# 
   362     0FE9                     	;# 
   363     0FEA                     	;# 
   364     0FEB                     	;# 
   365     0FED                     	;# 
   366     0FEE                     	;# 
   367     0FEF                     	;# 
   368                           
   369                           	psect	stringtext1
   370     00C6                     __pstringtext1:
   371     00C6                     _exp:
   372     00C6  3420               	retlw	32
   373     00C7                     __end_of_exp:
   374     000B                     _INTCONbits	set	11
   375     001F                     _CPSCON1	set	31
   376     001E                     _CPSCON0	set	30
   377     0011                     _PIR1bits	set	17
   378     0091                     _PIE1bits	set	145
   379     008D                     _TRISBbits	set	141
   380     008C                     _TRISAbits	set	140
   381     010C                     _LATAbits	set	268
   382     018D                     _ANSELBbits	set	397
   383     0199                     _RCREG	set	409
   384     019A                     _TXREG	set	410
   385     019D                     _RCSTAbits	set	413
   386     019F                     _BAUDCONbits	set	415
   387     019E                     _TXSTAbits	set	414
   388     019B                     _SPBRGL	set	411
   389     019C                     _SPBRGH	set	412
   390                           
   391                           	psect	cinit
   392     0048                     start_initialization:	
   393                           ; #config settings
   394                           
   395     0048                     __initialization:
   396                           
   397                           ; Clear objects allocated to COMMON
   398     0048  01F7               	clrf	__pbssCOMMON& (0+127)
   399     0049  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   400     004A  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   401     004B  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
   402     004C  01FB               	clrf	(__pbssCOMMON+4)& (0+127)
   403     004D  01FC               	clrf	(__pbssCOMMON+5)& (0+127)
   404                           
   405                           ; Clear objects allocated to BANK0
   406     004E  3020               	movlw	low __pbssBANK0
   407     004F  0084               	movwf	4
   408     0050  3000               	movlw	high __pbssBANK0
   409     0051  0085               	movwf	5
   410     0052  3019               	movlw	25
   411     0053  3180  20C0  3180   	fcall	clear_ram0
   412     0056                     end_of_initialization:	
   413                           ;End of C runtime variable initialization code
   414                           
   415     0056                     __end_of__initialization:
   416     0056  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   417     0057  0020               	movlb	0
   418     0058  3180  285A         	ljmp	_main	;jump to C main() function
   419                           
   420                           	psect	bssCOMMON
   421     0077                     __pbssCOMMON:
   422     0077                     _readData:
   423     0077                     	ds	2
   424     0079                     _num:
   425     0079                     	ds	2
   426     007B                     _numChars:
   427     007B                     	ds	2
   428                           
   429                           	psect	bssBANK0
   430     0020                     __pbssBANK0:
   431     0020                     _rxdChar:
   432     0020                     	ds	25
   433                           
   434                           	psect	clrtext
   435     00C0                     clear_ram0:	
   436                           ;	Called with FSR0 containing the base address, and
   437                           ;	WREG with the size to clear
   438                           
   439     00C0  0064               	clrwdt	;clear the watchdog before getting into this loop
   440     00C1                     clrloop0:
   441     00C1  0180               	clrf	0	;clear RAM location pointed to by FSR
   442     00C2  3101               	addfsr 0,1
   443     00C3  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   444     00C4  28C1               	goto	clrloop0	;have we reached the end yet?
   445     00C5  3400               	retlw	0	;all done for this memory range, return
   446                           
   447                           	psect	cstackCOMMON
   448     0070                     __pcstackCOMMON:
   449     0070                     ?_EUSART_Init:
   450     0070                     ?_EUSART_Write:	
   451                           ; 1 bytes @ 0x0
   452                           
   453     0070                     ?_EUSART_WriteString:	
   454                           ; 1 bytes @ 0x0
   455                           
   456     0070                     ??_ISR:	
   457                           ; 1 bytes @ 0x0
   458                           
   459     0070                     ?_main:	
   460                           ; 1 bytes @ 0x0
   461                           
   462     0070                     ?_ISR:	
   463                           ; 1 bytes @ 0x0
   464                           
   465                           
   466                           ; 2 bytes @ 0x0
   467     0070                     	ds	2
   468     0072                     ??_EUSART_Init:
   469     0072                     ??_EUSART_Write:	
   470                           ; 1 bytes @ 0x2
   471                           
   472     0072                     EUSART_Write@data:	
   473                           ; 1 bytes @ 0x2
   474                           
   475                           
   476                           ; 1 bytes @ 0x2
   477     0072                     	ds	1
   478     0073                     ??_EUSART_WriteString:
   479                           
   480                           ; 1 bytes @ 0x3
   481     0073                     	ds	1
   482     0074                     EUSART_WriteString@str:
   483                           
   484                           ; 1 bytes @ 0x4
   485     0074                     	ds	1
   486     0075                     ??_main:
   487                           
   488                           ; 1 bytes @ 0x5
   489     0075                     	ds	2
   490                           
   491                           	psect	maintext
   492     005A                     __pmaintext:	
   493 ;;
   494 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   495 ;;
   496 ;; *************** function _main *****************
   497 ;; Defined at:
   498 ;;		line 90 in file "main.c"
   499 ;; Parameters:    Size  Location     Type
   500 ;;		None
   501 ;; Auto vars:     Size  Location     Type
   502 ;;		None
   503 ;; Return value:  Size  Location     Type
   504 ;;                  1    wreg      void 
   505 ;; Registers used:
   506 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   507 ;; Tracked objects:
   508 ;;		On entry : B1F/0
   509 ;;		On exit  : 0/0
   510 ;;		Unchanged: 0/0
   511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   514 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   515 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   516 ;;Total ram usage:        2 bytes
   517 ;; Hardware stack levels required when called: 3
   518 ;; This function calls:
   519 ;;		_EUSART_Init
   520 ;;		_EUSART_WriteString
   521 ;; This function is called by:
   522 ;;		Startup code after reset
   523 ;; This function uses a non-reentrant model
   524 ;;
   525                           
   526     005A                     _main:	
   527                           ;psect for function _main
   528                           
   529     005A                     l727:	
   530                           ;incstack = 0
   531                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   532                           
   533                           
   534                           ;main.c: 92:     TRISAbits.TRISA1 = 0;
   535     005A  0021               	movlb	1	; select bank1
   536     005B  108C               	bcf	12,1	;volatile
   537                           
   538                           ;main.c: 93:     TRISBbits.TRISB1 = 1;
   539     005C  148D               	bsf	13,1	;volatile
   540                           
   541                           ;main.c: 94:     TRISBbits.TRISB2 = 0;
   542     005D  110D               	bcf	13,2	;volatile
   543                           
   544                           ;main.c: 95:     LATAbits.LATA1 = 0;
   545     005E  0022               	movlb	2	; select bank2
   546     005F  108C               	bcf	12,1	;volatile
   547                           
   548                           ;main.c: 98:     ANSELBbits.ANSB2 = 0;
   549     0060  0023               	movlb	3	; select bank3
   550     0061  110D               	bcf	13,2	;volatile
   551                           
   552                           ;main.c: 99:     ANSELBbits.ANSB1 = 0;
   553     0062  108D               	bcf	13,1	;volatile
   554     0063                     l729:
   555                           
   556                           ;main.c: 100:     CPSCON0 = 0x00;
   557     0063  0020               	movlb	0	; select bank0
   558     0064  019E               	clrf	30	;volatile
   559                           
   560                           ;main.c: 101:     CPSCON1 = 0x00;
   561     0065  019F               	clrf	31	;volatile
   562     0066                     l731:
   563                           
   564                           ;main.c: 103:     INTCONbits.GIE = 1;
   565     0066  178B               	bsf	11,7	;volatile
   566     0067                     l733:
   567                           
   568                           ;main.c: 104:     INTCONbits.PEIE = 1;
   569     0067  170B               	bsf	11,6	;volatile
   570     0068                     l735:
   571                           
   572                           ;main.c: 105:     PIE1bits.RCIE = 1;
   573     0068  0021               	movlb	1	; select bank1
   574     0069  1691               	bsf	17,5	;volatile
   575     006A                     l737:
   576                           
   577                           ;main.c: 106:     RCSTAbits.CREN = 1;
   578     006A  0023               	movlb	3	; select bank3
   579     006B  161D               	bsf	29,4	;volatile
   580     006C                     l739:
   581                           
   582                           ;main.c: 109:     EUSART_Init();
   583     006C  3180  20AA  3180   	fcall	_EUSART_Init
   584     006F                     l741:
   585                           
   586                           ;main.c: 113:         if (readData == 1) {
   587     006F  0377               	decf	_readData,w	;volatile
   588     0070  0478               	iorwf	_readData+1,w	;volatile
   589     0071  1D03               	btfss	3,2
   590     0072  2874               	goto	u61
   591     0073  2875               	goto	u60
   592     0074                     u61:
   593     0074  286F               	goto	l741
   594     0075                     u60:
   595     0075                     l743:
   596                           
   597                           ;main.c: 114:         TXSTAbits.TXEN = 1;
   598     0075  0023               	movlb	3	; select bank3
   599     0076  169E               	bsf	30,5	;volatile
   600     0077                     l745:
   601                           
   602                           ;main.c: 115:         EUSART_WriteString(rxdChar);
   603     0077  3020               	movlw	(low (_rxdChar| 0))& (0+255)
   604     0078  3180  2094  3180   	fcall	_EUSART_WriteString
   605     007B                     l747:
   606                           
   607                           ;main.c: 116:         TXSTAbits.TXEN = 0;
   608     007B  0023               	movlb	3	; select bank3
   609     007C  129E               	bcf	30,5	;volatile
   610     007D                     l749:
   611                           
   612                           ;main.c: 117:         if (exp == rxdChar) {
   613     007D  3020               	movlw	32
   614     007E  00F5               	movwf	??_main
   615     007F  3000               	movlw	0
   616     0080  00F6               	movwf	??_main+1
   617     0081  3000               	movlw	0
   618     0082  0676               	xorwf	??_main+1,w
   619     0083  1D03               	skipz
   620     0084  2887               	goto	u75
   621     0085  3020               	movlw	low (_rxdChar| 0)
   622     0086  0675               	xorwf	??_main,w
   623     0087                     u75:
   624     0087  1D03               	skipz
   625     0088  288A               	goto	u71
   626     0089  288B               	goto	u70
   627     008A                     u71:
   628     008A  288D               	goto	l72
   629     008B                     u70:
   630     008B                     l751:
   631                           
   632                           ;main.c: 118:             LATAbits.LATA1 = 1;
   633     008B  0022               	movlb	2	; select bank2
   634     008C  148C               	bsf	12,1	;volatile
   635     008D                     l72:	
   636                           ;main.c: 121:         }
   637                           
   638                           
   639                           ;main.c: 122:         RCSTAbits.CREN = 1;
   640     008D  0023               	movlb	3	; select bank3
   641     008E  161D               	bsf	29,4	;volatile
   642     008F                     l753:
   643                           
   644                           ;main.c: 123:         readData = 0;
   645     008F  01F7               	clrf	_readData	;volatile
   646     0090  01F8               	clrf	_readData+1	;volatile
   647     0091  286F               	goto	l741
   648     0092  3180  2846         	ljmp	start
   649     0094                     __end_of_main:
   650                           
   651                           	psect	text1
   652     0094                     __ptext1:	
   653 ;; *************** function _EUSART_WriteString *****************
   654 ;; Defined at:
   655 ;;		line 66 in file "main.c"
   656 ;; Parameters:    Size  Location     Type
   657 ;;  str             1    wreg     PTR const unsigned char 
   658 ;;		 -> rxdChar(25), 
   659 ;; Auto vars:     Size  Location     Type
   660 ;;  str             1    4[COMMON] PTR const unsigned char 
   661 ;;		 -> rxdChar(25), 
   662 ;; Return value:  Size  Location     Type
   663 ;;                  1    wreg      void 
   664 ;; Registers used:
   665 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   666 ;; Tracked objects:
   667 ;;		On entry : 0/0
   668 ;;		On exit  : 0/0
   669 ;;		Unchanged: 0/0
   670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   672 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   673 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   674 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   675 ;;Total ram usage:        2 bytes
   676 ;; Hardware stack levels used: 1
   677 ;; Hardware stack levels required when called: 2
   678 ;; This function calls:
   679 ;;		_EUSART_Write
   680 ;; This function is called by:
   681 ;;		_main
   682 ;; This function uses a non-reentrant model
   683 ;;
   684                           
   685     0094                     _EUSART_WriteString:	
   686                           ;psect for function _EUSART_WriteString
   687                           
   688                           
   689                           ;incstack = 0
   690                           ; Regs used in _EUSART_WriteString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   691                           ;EUSART_WriteString@str stored from wreg
   692     0094  00F4               	movwf	EUSART_WriteString@str
   693     0095                     l701:
   694                           
   695                           ;main.c: 67:     while (*str) {
   696     0095  28A1               	goto	l707
   697     0096                     l703:
   698                           
   699                           ;main.c: 69:         EUSART_Write(*str++);
   700     0096  0874               	movf	EUSART_WriteString@str,w
   701     0097  0086               	movwf	6
   702     0098  0187               	clrf	7
   703     0099  0801               	movf	1,w
   704     009A  3180  20B6  3180   	fcall	_EUSART_Write
   705     009D                     l705:
   706     009D  3001               	movlw	1
   707     009E  00F3               	movwf	??_EUSART_WriteString
   708     009F  0873               	movf	??_EUSART_WriteString,w
   709     00A0  07F4               	addwf	EUSART_WriteString@str,f
   710     00A1                     l707:
   711                           
   712                           ;main.c: 67:     while (*str) {
   713     00A1  0874               	movf	EUSART_WriteString@str,w
   714     00A2  0086               	movwf	6
   715     00A3  0187               	clrf	7
   716     00A4  0801               	movf	1,w
   717     00A5  1D03               	btfss	3,2
   718     00A6  28A8               	goto	u21
   719     00A7  28A9               	goto	u20
   720     00A8                     u21:
   721     00A8  2896               	goto	l703
   722     00A9                     u20:
   723     00A9                     l57:
   724     00A9  0008               	return
   725     00AA                     __end_of_EUSART_WriteString:
   726                           
   727                           	psect	text2
   728     00B6                     __ptext2:	
   729 ;; *************** function _EUSART_Write *****************
   730 ;; Defined at:
   731 ;;		line 61 in file "main.c"
   732 ;; Parameters:    Size  Location     Type
   733 ;;  data            1    wreg     unsigned char 
   734 ;; Auto vars:     Size  Location     Type
   735 ;;  data            1    2[COMMON] unsigned char 
   736 ;; Return value:  Size  Location     Type
   737 ;;                  1    wreg      void 
   738 ;; Registers used:
   739 ;;		wreg
   740 ;; Tracked objects:
   741 ;;		On entry : 0/0
   742 ;;		On exit  : 0/0
   743 ;;		Unchanged: 0/0
   744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   746 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   748 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   749 ;;Total ram usage:        1 bytes
   750 ;; Hardware stack levels used: 1
   751 ;; Hardware stack levels required when called: 1
   752 ;; This function calls:
   753 ;;		Nothing
   754 ;; This function is called by:
   755 ;;		_EUSART_WriteString
   756 ;; This function uses a non-reentrant model
   757 ;;
   758                           
   759     00B6                     _EUSART_Write:	
   760                           ;psect for function _EUSART_Write
   761                           
   762                           
   763                           ;incstack = 0
   764                           ; Regs used in _EUSART_Write: [wreg]
   765                           ;EUSART_Write@data stored from wreg
   766     00B6  00F2               	movwf	EUSART_Write@data
   767     00B7                     l683:
   768     00B7                     l48:	
   769                           ;main.c: 62:     while (!PIR1bits.TXIF);
   770                           
   771     00B7  0020               	movlb	0	; select bank0
   772     00B8  1E11               	btfss	17,4	;volatile
   773     00B9  28BB               	goto	u11
   774     00BA  28BC               	goto	u10
   775     00BB                     u11:
   776     00BB  28B7               	goto	l48
   777     00BC                     u10:
   778     00BC                     l685:
   779                           
   780                           ;main.c: 63:     TXREG = data;
   781     00BC  0872               	movf	EUSART_Write@data,w
   782     00BD  0023               	movlb	3	; select bank3
   783     00BE  009A               	movwf	26	;volatile
   784     00BF                     l51:
   785     00BF  0008               	return
   786     00C0                     __end_of_EUSART_Write:
   787                           
   788                           	psect	text3
   789     00AA                     __ptext3:	
   790 ;; *************** function _EUSART_Init *****************
   791 ;; Defined at:
   792 ;;		line 44 in file "main.c"
   793 ;; Parameters:    Size  Location     Type
   794 ;;		None
   795 ;; Auto vars:     Size  Location     Type
   796 ;;		None
   797 ;; Return value:  Size  Location     Type
   798 ;;                  1    wreg      void 
   799 ;; Registers used:
   800 ;;		wreg
   801 ;; Tracked objects:
   802 ;;		On entry : 0/0
   803 ;;		On exit  : 0/0
   804 ;;		Unchanged: 0/0
   805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   810 ;;Total ram usage:        0 bytes
   811 ;; Hardware stack levels used: 1
   812 ;; Hardware stack levels required when called: 1
   813 ;; This function calls:
   814 ;;		Nothing
   815 ;; This function is called by:
   816 ;;		_main
   817 ;; This function uses a non-reentrant model
   818 ;;
   819                           
   820     00AA                     _EUSART_Init:	
   821                           ;psect for function _EUSART_Init
   822                           
   823     00AA                     l687:	
   824                           ;incstack = 0
   825                           ; Regs used in _EUSART_Init: [wreg]
   826                           
   827                           
   828                           ;main.c: 46:     SPBRGH = 0x34;
   829     00AA  3034               	movlw	52
   830     00AB  0023               	movlb	3	; select bank3
   831     00AC  009C               	movwf	28	;volatile
   832                           
   833                           ;main.c: 47:     SPBRGL = 0x10;
   834     00AD  3010               	movlw	16
   835     00AE  009B               	movwf	27	;volatile
   836     00AF                     l689:
   837                           
   838                           ;main.c: 50:     TXSTAbits.SYNC = 0;
   839     00AF  121E               	bcf	30,4	;volatile
   840     00B0                     l691:
   841                           
   842                           ;main.c: 51:     TXSTAbits.BRGH = 1;
   843     00B0  151E               	bsf	30,2	;volatile
   844     00B1                     l693:
   845                           
   846                           ;main.c: 52:     BAUDCONbits.BRG16 = 1;
   847     00B1  159F               	bsf	31,3	;volatile
   848     00B2                     l695:
   849                           
   850                           ;main.c: 53:     RCSTAbits.SPEN = 1;
   851     00B2  179D               	bsf	29,7	;volatile
   852     00B3                     l697:
   853                           
   854                           ;main.c: 56:     TXSTAbits.TXEN = 1;
   855     00B3  169E               	bsf	30,5	;volatile
   856     00B4                     l699:
   857                           
   858                           ;main.c: 57:     RCSTAbits.CREN = 1;
   859     00B4  161D               	bsf	29,4	;volatile
   860     00B5                     l45:
   861     00B5  0008               	return
   862     00B6                     __end_of_EUSART_Init:
   863                           
   864                           	psect	intentry
   865     0004                     __pintentry:	
   866 ;; *************** function _ISR *****************
   867 ;; Defined at:
   868 ;;		line 77 in file "main.c"
   869 ;; Parameters:    Size  Location     Type
   870 ;;		None
   871 ;; Auto vars:     Size  Location     Type
   872 ;;		None
   873 ;; Return value:  Size  Location     Type
   874 ;;                  2   61[None  ] int 
   875 ;; Registers used:
   876 ;;		wreg, fsr1l, fsr1h, status,2, status,0
   877 ;; Tracked objects:
   878 ;;		On entry : 0/0
   879 ;;		On exit  : 0/0
   880 ;;		Unchanged: 0/0
   881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   884 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   885 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   886 ;;Total ram usage:        2 bytes
   887 ;; Hardware stack levels used: 1
   888 ;; This function calls:
   889 ;;		Nothing
   890 ;; This function is called by:
   891 ;;		Interrupt level 1
   892 ;; This function uses a non-reentrant model
   893 ;;
   894                           
   895     0004                     _ISR:
   896                           
   897                           ;incstack = 0
   898     0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
   899                           
   900                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
   901     0005  3180               	pagesel	$
   902     0006                     i1l709:
   903                           
   904                           ;main.c: 78:     LATAbits.LATA1 = 0;
   905     0006  0022               	movlb	2	; select bank2
   906     0007  108C               	bcf	12,1	;volatile
   907     0008                     i1l711:
   908                           
   909                           ;main.c: 79:     rxdChar[num] = RCREG;
   910     0008  0879               	movf	_num,w	;volatile
   911     0009  3E20               	addlw	(low (_rxdChar| 0))& (0+255)
   912     000A  0086               	movwf	6
   913     000B  0187               	clrf	7
   914     000C  0023               	movlb	3	; select bank3
   915     000D  0819               	movf	25,w	;volatile
   916     000E  0081               	movwf	1
   917     000F                     i1l713:
   918                           
   919                           ;main.c: 80:     num++;
   920     000F  3001               	movlw	1
   921     0010  07F9               	addwf	_num,f	;volatile
   922     0011  3000               	movlw	0
   923     0012  3DFA               	addwfc	_num+1,f	;volatile
   924     0013                     i1l715:
   925                           
   926                           ;main.c: 81:     if (rxdChar == '\n' || rxdChar == '\r' || num >= 16) {
   927     0013  300A               	movlw	10
   928     0014  00F0               	movwf	??_ISR
   929     0015  3000               	movlw	0
   930     0016  00F1               	movwf	??_ISR+1
   931     0017  3000               	movlw	0
   932     0018  0671               	xorwf	??_ISR+1,w
   933     0019  1D03               	skipz
   934     001A  281D               	goto	u3_25
   935     001B  3020               	movlw	low (_rxdChar| 0)
   936     001C  0670               	xorwf	??_ISR,w
   937     001D                     u3_25:
   938     001D  1903               	skipnz
   939     001E  2820               	goto	u3_21
   940     001F  2821               	goto	u3_20
   941     0020                     u3_21:
   942     0020  283C               	goto	i1l721
   943     0021                     u3_20:
   944     0021                     i1l717:
   945     0021  300D               	movlw	13
   946     0022  00F0               	movwf	??_ISR
   947     0023  3000               	movlw	0
   948     0024  00F1               	movwf	??_ISR+1
   949     0025  3000               	movlw	0
   950     0026  0671               	xorwf	??_ISR+1,w
   951     0027  1D03               	skipz
   952     0028  282B               	goto	u4_25
   953     0029  3020               	movlw	low (_rxdChar| 0)
   954     002A  0670               	xorwf	??_ISR,w
   955     002B                     u4_25:
   956     002B  1903               	skipnz
   957     002C  282E               	goto	u4_21
   958     002D  282F               	goto	u4_20
   959     002E                     u4_21:
   960     002E  283C               	goto	i1l721
   961     002F                     u4_20:
   962     002F                     i1l719:
   963     002F  087A               	movf	_num+1,w	;volatile
   964     0030  3A80               	xorlw	128
   965     0031  00F0               	movwf	??_ISR
   966     0032  3080               	movlw	128
   967     0033  0270               	subwf	??_ISR,w
   968     0034  1D03               	skipz
   969     0035  2838               	goto	u5_25
   970     0036  3010               	movlw	16
   971     0037  0279               	subwf	_num,w	;volatile
   972     0038                     u5_25:
   973     0038  1C03               	skipc
   974     0039  283B               	goto	u5_21
   975     003A  283C               	goto	u5_20
   976     003B                     u5_21:
   977     003B  2844               	goto	i1l65
   978     003C                     u5_20:
   979     003C                     i1l721:
   980                           
   981                           ;main.c: 82:             num = 0;
   982     003C  01F9               	clrf	_num	;volatile
   983     003D  01FA               	clrf	_num+1	;volatile
   984     003E                     i1l723:
   985                           
   986                           ;main.c: 83:             readData=1;
   987     003E  3001               	movlw	1
   988     003F  00F7               	movwf	_readData	;volatile
   989     0040  3000               	movlw	0
   990     0041  00F8               	movwf	_readData+1	;volatile
   991     0042                     i1l725:
   992                           
   993                           ;main.c: 84:             RCSTAbits.CREN = 0;
   994     0042  0023               	movlb	3	; select bank3
   995     0043  121D               	bcf	29,4	;volatile
   996     0044                     i1l65:
   997     0044  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   998     0045  0009               	retfie
   999     0046                     __end_of_ISR:
  1000     007E                     btemp	set	126	;btemp
  1001     007E                     int$flags	set	126
  1002     007E                     wtemp0	set	126
  1003                           
  1004                           	psect	config
  1005                           
  1006                           ;Config register CONFIG1 @ 0x8007
  1007                           ;	Oscillator Selection
  1008                           ;	FOSC = HS, HS Oscillator, High-speed crystal/resonator connected between OSC1 and OSC2
      +                           pins
  1009                           ;	Watchdog Timer Enable
  1010                           ;	WDTE = OFF, WDT disabled
  1011                           ;	Power-up Timer Enable
  1012                           ;	PWRTE = OFF, PWRT disabled
  1013                           ;	MCLR Pin Function Select
  1014                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  1015                           ;	Flash Program Memory Code Protection
  1016                           ;	CP = OFF, Program memory code protection is disabled
  1017                           ;	Data Memory Code Protection
  1018                           ;	CPD = 0x1, unprogrammed default
  1019                           ;	Brown-out Reset Enable
  1020                           ;	BOREN = ON, Brown-out Reset enabled
  1021                           ;	Clock Out Enable
  1022                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  1023                           ;	Internal/External Switchover
  1024                           ;	IESO = ON, Internal/External Switchover mode is enabled
  1025                           ;	Fail-Safe Clock Monitor Enable
  1026                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  1027     8007                     	org	32775
  1028     8007  3FE2               	dw	16354

Data Sizes:
    Strings     0
    Constant    1
    Data        0
    BSS         31
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      13
    BANK0            80      0      25
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    EUSART_WriteString@str	PTR const unsigned char  size(1) Largest target is 25
		 -> rxdChar(BANK0[25]), 


Critical Paths under _main in COMMON

    _main->_EUSART_WriteString
    _EUSART_WriteString->_EUSART_Write

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0      75
                                              5 COMMON     2     2      0
                        _EUSART_Init
                 _EUSART_WriteString
 ---------------------------------------------------------------------------------
 (1) _EUSART_WriteString                                   2     2      0      75
                                              3 COMMON     2     2      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         1     1      0      15
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Init
   _EUSART_WriteString
     _EUSART_Write

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0      19       5       31.2%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      26      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      26      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Tue Jul 22 11:27:57 2025

                        l51 00BF                          l45 00B5                          l48 00B7  
                        l72 008D                          l57 00A9                          u10 00BC  
                        u11 00BB                          u20 00A9                          u21 00A8  
                        u60 0075                          u61 0074                          u70 008B  
                        u71 008A                          u75 0087       EUSART_WriteString@str 0074  
                       l701 0095                         l703 0096                         l705 009D  
                       l707 00A1                         l731 0066                         l741 006F  
                       l733 0067                         l751 008B                         l743 0075  
                       l735 0068                         l727 005A                         l753 008F  
                       l745 0077                         l737 006A                         l729 0063  
                       l691 00B0                         l683 00B7                         l747 007B  
                       l739 006C                         l693 00B1                         l685 00BC  
                       l749 007D                         l695 00B2                         l687 00AA  
                       l697 00B3                         l689 00AF                         l699 00B4  
                       _ISR 0004                         _exp 00C6                         _num 0079  
                       wreg 0009                ?_EUSART_Init 0070                        ?_ISR 0070  
                      i1l65 0044                        u3_20 0021                        u3_21 0020  
                      u3_25 001D                        u4_20 002F                        u4_21 002E  
                      u4_25 002B                        u5_20 003C                        u5_21 003B  
                      u5_25 0038                        _main 005A                        fsr0h 0005  
                      fsr1h 0007                        indf0 0000                        fsr0l 0004  
                      indf1 0001                        fsr1l 0006                        btemp 007E  
                      start 0046                       ??_ISR 0070               ?_EUSART_Write 0070  
                     ?_main 0070                       i1l711 0008                       i1l721 003C  
                     i1l713 000F                       i1l723 003E                       i1l715 0013  
                     i1l725 0042                       i1l717 0021                       i1l709 0006  
                     i1l719 002F                       _RCREG 0199                       _TXREG 019A  
                     status 0003                       wtemp0 007E             __initialization 0048  
              __end_of_main 0094              ??_EUSART_Write 0072                      ??_main 0075  
        _EUSART_WriteString 0094                      _SPBRGH 019C                      _SPBRGL 019B  
       ?_EUSART_WriteString 0070        ??_EUSART_WriteString 0073     __end_of__initialization 0056  
            __pcstackCOMMON 0070                  __pbssBANK0 0020        __end_of_EUSART_Write 00C0  
                __pmaintext 005A                  __pintentry 0004                     _CPSCON0 001E  
                   _CPSCON1 001F                     __ptext1 0094                     __ptext2 00B6  
                   __ptext3 00AA                     _rxdChar 0020                     clrloop0 00C1  
      end_of_initialization 0056                   _RCSTAbits 019D                   _TRISAbits 008C  
                 _TRISBbits 008D                   _TXSTAbits 019E                 _BAUDCONbits 019F  
              _EUSART_Write 00B6         start_initialization 0048                 __end_of_ISR 0046  
               __end_of_exp 00C7               ??_EUSART_Init 0072                 __pbssCOMMON 0077  
                 ___latbits 0002         __end_of_EUSART_Init 00B6                    _LATAbits 010C  
                 clear_ram0 00C0                    _PIE1bits 0091                    _PIR1bits 0011  
          EUSART_Write@data 0072                 _EUSART_Init 00AA                  _ANSELBbits 018D  
                  _readData 0077                    _numChars 007B                    int$flags 007E  
__end_of_EUSART_WriteString 00AA                  _INTCONbits 000B                    intlevel1 0000  
             __pstringtext1 00C6  
